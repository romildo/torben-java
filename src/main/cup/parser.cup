package parse;

import error.ErrorHelper;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import io.vavr.collection.List;
import absyn.*;

parser code {:
  public Parser(Lexer lex) {
     this(lex, lex.getSymbolFactory());
  }

  private Loc loc(Location left, Location right) {
     return Loc.loc(left, right);
  }

  /* override error routines */
  private Loc locOfInfo(Object info) {
     return info instanceof ComplexSymbol ?
               Loc.loc((ComplexSymbol) info) :
               info instanceof Symbol ?
                  Loc.loc((Symbol) info) :
                  Loc.loc(cur_token);
  }
  private String lexemeOfInfo(Object info) {
     return info instanceof ComplexSymbol ?
               " at '" + ((ComplexSymbol) info).getName() + "'" :
               "";

  }
  public void report_fatal_error(String message, Object info) {
     done_parsing();
     throw ErrorHelper.error(locOfInfo(info), "%s%s%nCan't recover from previous error(s), giving up.", message, lexemeOfInfo(info));
  }
  public void report_error(String message, Object info) {
     throw ErrorHelper.error(locOfInfo(info), "%s%s", message, lexemeOfInfo(info));
  }
:};


terminal String LITBOOL;
terminal String LITINT;
terminal String LITSTRING;
terminal String ID;
terminal        ASSIGN;
terminal        PLUS, MINUS, TIMES, DIV, MOD, UMINUS;
terminal        EQ, NE, LT, LE, GT, GE;
terminal        AND, OR;
terminal        LPAREN, RPAREN, COMMA;
terminal        BOOL, INT, STRING;
terminal        IF, THEN, ELSE;
terminal        WHILE, DO;
terminal        LET, IN;

non terminal Exp program;
non terminal Exp exp;
non terminal List<Exp> exps, expsRest;

precedence left PLUS;

start with program;

program ::=
  exp:x                        {: RESULT = x; :}
;

exp ::=
  LITINT:x                     {: RESULT = new ExpInt(loc(xxleft,xxright), new Integer(x)); :}
| exp:x PLUS exp:y             {: RESULT = new ExpBin(loc(xxleft,yxright), ExpBin.Operator.PLUS, x, y); :}
| LPAREN:l exps:s RPAREN:r     {: RESULT = new ExpSeq(loc(lxleft,rxright), s); :}
| ID:x                         {: RESULT = new ExpVar(loc(xxleft,xxright), x); :}
| LET:l ID:v EQ exp:i IN exp:b {: RESULT = new ExpLet(loc(lxleft,bxright), v, i, b); :}
;

exps ::=
  /* empty */                  {: RESULT = List.empty(); :}
| exp:x expsRest:xs            {: RESULT = xs.prepend(x); :}
;

expsRest ::=
  /* empty */                  {: RESULT = List.empty(); :}
| COMMA exp:x expsRest:xs      {: RESULT = xs.prepend(x); :}
;
